{
    "contents" : "\\documentclass{article}\n\\usepackage[T1]{fontenc}\n\\usepackage{Sweave}\n\\usepackage{thumbpdf}\n\\usepackage{url}\n%\\usepackage{wrapfig}\n\\usepackage{hyperref}\n\n\\hypersetup{\n  pdftitle={Using the Google Chart Tools with R},%\n  pdfauthor={Markus Gesmann},%\n}\n\n%\\VignetteEngine(Sweave)\n%\\VignetteIndexEntry{Using the Google Chart Tools with R}\n%\\VignetteDepends{googleVis}\n%\\VignetteKeywords{google, visualisation, api}\n%\\VignettePackage{googleVis}\n\n\n\\SweaveOpts{engine=R, eps=FALSE, keep.source = TRUE}\n<<options, echo=FALSE>>=\noptions(prompt = \"R> \", digits = 4, show.signif.stars = FALSE)\n@\n\n\n%\\keywords{google, visualisation, api, \\proglang{R}}\n\n\\setlength{\\parindent}{0.0in}\n\\setlength{\\parskip}{2mm}\n\n\\newcommand{\\googleVis}{\\textbf{\\texttt{googleVis}} }\n\\newcommand{\\knitr}{\\textbf{\\texttt{knitr}} }\n\\newcommand{\\rsp}{\\textbf{\\texttt{R.rsp }}}\n\\newcommand{\\brew}{\\textbf{\\texttt{brew }}}\n\\newcommand{\\rapache}{\\emph{{RApache }}}\n\\newcommand{\\Rook}{\\emph{{Rook }}}\n\\newcommand{\\shiny}{\\textbf{\\texttt{shiny }}}\n\n\\renewcommand{\\familydefault}{\\sfdefault}\n\n\\begin{document}\n\\SweaveOpts{concordance=TRUE}\n\n\\author{Markus Gesmann\\footnote{markus.gesmann@gmail.com},\n  Diego de Castillo\\footnote{decastillo@gmail.com}\\\\\nContact: rvisualisation@gmail.com}\n\\title{Using the Google Chart Tools with R:\\\\\n  googleVis-\\Sexpr{packageDescription(\"googleVis\")[['Version']]} Package Vignette\n}\n\\maketitle\n\\begin{abstract}\n  The \\googleVis package provides an interface between R and the\n  Google Chart Tools.  The Google Chart Tools offer interactive\n  charts which can be embedded into web pages. The best \n  known of these charts is probably the Motion Chart, popularised \n  by Hans Rosling in his TED talks. \n \n  The functions of the \\googleVis package allow the user to visualise\n  data stored in R data frames with the Google Chart Tools\n  without uploading the data to Google. The output of a \\googleVis\n  function is html code that contains the data and references to\n  JavaScript functions hosted by Google.\n  \n  googleVis makes use of the internal R HTTP server to display the\n  output locally. A modern browser with an Internet connection is\n  required and for some charts Flash.\n\t     \n\\end{abstract}\n\n\\clearpage\n\\tableofcontents\n\\clearpage\n\n\\section{Introduction}\\label{sec:Intro}\n\n\\subsection{Motivation}\\label{sec:Motivation}\nMore and more data is becoming available, and yet\nstories and insights are still often missed: we are lost in the data\njungle and struggle to see the wood for the trees. \n\nHence, new tools are required to bring data to life, to engage with\nusers, to enable them to slice and dice the data, to view it from\nvarious angles and to find stories worth telling: outliers, trends or\neven the obvious. \n\nIn 2006 Hans Rosling gave an inspiring talk at\nTED~\\cite{HansRoslingTedTalk} about social and economic developments\nin the world over the past 50 years, which challenged the views and\nperceptions of many listeners. Rosling had used extensive data analysis\nto reach his conclusions.  To visualise his talk, he and his team at\nGapminder~\\cite{Gapminder} had developed animated bubble charts, aka\nmotion charts, see Figure~\\ref{MotionChartGUI}. \n\nRosling's presentation popularised the idea and use of interactive\ncharts. One year later the software behind\nGapminder was bought by Google and integrated as motion charts into\ntheir Google Chart Tools~\\cite{GoogleVisApi}, formerly known as Google\nVisualisation API.  \n\nIn 2010 Sebasti\\'{a}n P\\'{e}rez Saaibi~\\cite{Saaibi2010} presented at the \nR/Rmetrics Workshop on  Computational Finance and Financial\nEngineering, the idea to use Google motion charts to visualise R\noutput with the \\rsp package~\\cite{Rsp}. \n\nInspired by those talks and the desire to use interactive data\nvisualisation tools to foster the dialogue between data analysts and\nothers the authors of this vignette started the development of the\n\\googleVis package~\\cite{googleVis},\n\\cite{RJournal:2011-2:GesmannCastillo} in August 2010. \n\nOf course there are many other alternative visualisation toolkits out\nthere, e.g. \n\\href{http://d3js.org}{d3js} \\cite{d3js}, \n\\href{http://www-958.ibm.com/software/data/cognos/manyeyes/}{Many\n  Eyes} \\cite{ManyEyes},\n\\href{http://teethgrinder.co.uk/open-flash-chart/}{Open Flash Chart\n  (Flash)} \\cite{OpenFlashChart}, \n\\href{http://www.openlayers.org/}{OpenLayers\n  (JavaScript)} \\cite{OpenLayers}, \n\\href{http://processing.org/}{Processing (Java)} \\cite{Processing}, \nand \\href{http://flare.prefuse.org/}{FLARE (ActionScript)} \\cite{Flare}.\n\n\\begin{figure}[t]\n\\begin{center}\n\\includegraphics[width=\\textwidth]{./figures/MotionChart.pdf}\n\\caption{\n  Overview of a Google Motion Chart.  Screenshot of the output of\n  \\texttt{plot(gvisMotionChart(Fruits, idvar='Fruit', timevar='Year'))}\n}\\label{MotionChartGUI}\n\\end{center}\n\\end{figure}\n%\\clearpage\n\n\\subsection{Google Chart Tools}\\label{sec:GoogleChartTools}\n\nThe Google Chart Tools~\\cite{GoogleVisApi}\nallow users to create interactive charts as part of Google\ndocuments, spreadsheets and web pages. In this text we will focus \non the usage of the API as part of web pages.\n\nThe Google Public Data Explorer~\\cite{GooglePublicData} provides a\ngood example, demonstrating the use of interactive charts and how they can\nhelp to analyse data. Please note, that all of those charts are\nrendered by the browser.\n\nThe charting data can either be embedded into the html file or read\ndynamically. The key to the Google Chart Tools is that the data is\nstructured in a DataTable~\\cite{DataTable}, and this is where the \\googleVis\npackage helps, as it transforms R data frames into JSON~\\cite{json}\nobjects, using the \\texttt{\\textbf{RJSONIO}} package~\\cite{RJSONIO}, as\nthe basis for a DataTable. \n\nAs an example we shall look at the html-code of a motion chart from\nGoogle's visualisation gallery~\\cite{GoogleMotionChart}, which\ngenerates output similar to Figure~\\ref{MotionChartGUI}:\n\n\\begin{small}\\label{motionchartcodeexample}\n\\begin{verbatim}\n 1 <html>\n 2  <head>\n 3   <script type=\"text/javascript\" \n 4     src=\"http://www.google.com/jsapi\">\n 5   </script>\n 6   <script type=\"text/javascript\">\n 7     google.load('visualization', '1', \n 8      {'packages':['motionchart']});\n 9    google.setOnLoadCallback(drawChart);\n10    function drawChart() {\n11    var data=new google.visualization.DataTable();\n12    data.addColumn('string', 'Fruit');\n13    data.addColumn('date', 'Date');\n14    data.addColumn('number', 'Sales');\n15    data.addColumn('number', 'Expenses');\n16    data.addColumn('string', 'Location');\n17    data.addRows([\n18    ['Apples',new Date(1988,0,1),1000,300,'East'],\n19    ['Oranges',new Date(1988,0,1),1150,200,'West'],\n20    ['Bananas',new Date(1988,0,1),300,250,'West'],\n21    ['Apples',new Date(1989,6,1),1200,400,'East'],\n22    ['Oranges',new Date(1989,6,1),750,150,'West'],\n23    ['Bananas',new Date(1989,6,1),788,617,'West']\n24    ]);\n25    var chart=new google.visualization.MotionChart(\n26      document.getElementById('chart_div'));\n27    chart.draw(data, {width: 600, height:300});\n28   }\n29   </script>\n30  </head>\n31  <body>\n32   <div id=\"chart_div\" \n33        style=\"width:600px; height:300px;\">\n34   </div>\n35  </body>\n36 </html>\n\\end{verbatim}\n\\end{small}\nThe code and data are processed and rendered by the browser and is\nnot submitted to any server\\footnote{\\url{https://google-developers.appspot.com/chart/interactive/docs/gallery/motionchart.html\\#Data\\_Policy}}. \n\nYou will notice that the above html code has five generic\nparts\\footnote{For more details see\n\\url{https://google-developers.appspot.com/chart/interactive/docs/index}}:\n\\begin{itemize}\n\\item references to Google's AJAX (l. 4) and Visualisation\n  API (ll. 7 -- 8),\n%%shown here as \\verb=jsapi= and \\verb='motionchart'=,\n\n\\item data to visualise as a \\verb=DataTable= (ll. 11 -- 24),\n\n\\item an instance call to create the chart (ll. 25 -- 26),\n\n\\item a method call to draw the chart including options, shown\n  here as width and height (l. 27),\n \n\\item an HTML \\verb=<div>= element to add the chart to the page (ll.\n  32 -- 34).\n\\end{itemize}\nThese principles hold true for most of the interactive charts of the\nGoogle Chart Tools, see the examples in Figure~\\ref{demos}.\n\nHowever, before you use the API you should read the \\href{https://developers.google.com/terms/}{Google\n  Terms of Service}~\\cite{GoogleTerms}. \n\n\\section{The \\googleVis package}\\label{sec:googleVisPackage}\n\n\nThe \\googleVis package provides an interface between R and the Google\nChart Tools.  The functions of the package allow the user to\nvisualise data stored in R data frames with the Google Chart Tools.\n\nVersion (\\Sexpr{packageDescription(\"googleVis\")[['Version']]}) of the package\nprovides interfaces to  Motion Charts, Annotated Time Lines, \nMaps, Geo Maps, Geo Charts, Intensity Maps, Tables, Gauges, \nTree Maps, further Line, Bar, Bubble, Column, Area, Stepped Area, \nCombo, Scatter, Candlestick, Pie, Sankey, Annotation, \nHistogram, Timeline, Calendar and Org Charts; see \nFigure~\\ref{demos} for some examples. \n\nThe output of a \\googleVis function is html code that contains the\ndata and references to JavaScript functions hosted by Google. A\nbrowser with an Internet connection is required to view\nthe output, and for Motion Charts, Geo Maps and Annotated Time Lines\nalso Flash. \n\n<<eval=FALSE, echo=FALSE>>=\n## Code for screen shot\nMC <- gvisMotionChart(Fruits, \"Fruit\", \"Year\", options=list(width=500, height=300))\nATL <- gvisAnnotatedTimeLine(Stock, datevar=\"Date\",\n                           numvar=\"Value\", idvar=\"Device\",\n                           titlevar=\"Title\", annotationvar=\"Annotation\",\n                           options=list(\n                             width=300, height=300,\n                             fill=10, displayExactValues=TRUE,\n                             colors=\"['#0000ff','#00ff00']\")\n                           )\n                          \nMap <- gvisMap(Andrew, \"LatLong\" , \"Tip\",\n              options=list(showTip=TRUE, showLine=TRUE, enableScrollWheel=TRUE,\n                           mapType='terrain', useMapTypeControl=TRUE,\n                           width=400, height=200))\nGeo <- gvisGeoMap(Exports, locationvar='Country', numvar='Profit',\n                 options=list(dataMode=\"regions\", width=400,height=200)) \n\n## Table with enabled paging\nTable <- gvisTable(Population, options=list(page='enable', height=200, width=500))\n\nTree <- gvisTreeMap(Regions,  \"Region\", \"Parent\", \"Val\", \"Fac\",\n                    options=list(width=300, height=200,\n                                 fontSize=16,\n                                 minColor='#EDF8FB',\n                                 midColor='#66C2A4',\n                                 maxColor='#006D2C',\n                                 headerHeight=20,\n                                 fontColor='black',\n                                 showScale=TRUE))\n\nM <- gvisMerge(gvisMerge(gvisMerge(MC, ATL, TRUE, tableOptions=\"cellspacing=10\"), \n                         gvisMerge(Map, Geo, TRUE, tableOptions=\"cellspacing=10\")), \n                         gvisMerge(Table, Tree, TRUE, tableOptions=\"cellspacing=10\"))\nplot(M)\n@ \n\\begin{figure}[t]\n\\begin{center}\n\\includegraphics[width=\\textwidth]{./figures/googleVisDemoPlots.pdf}\n\\caption{\n  Screenshot of some of the outputs of \\texttt{demo(googleVis)}.\n  Clockwise from top left:\n  \\texttt{gvisMotionChart}, \\texttt{gvisAnnotatedTimeLine}, \n  \\texttt{gvisGeoMap}, \\texttt{gvisTreeMap}, \\texttt{gvisTable}, and \\texttt{gvisMap}.\n}\\label{demos}\n\\end{center}\n\\end{figure}\n\n\\subsection{Installation}\\label{sec:Installation}\nYou can install \\googleVis in the usual way from CRAN, e.g.:\n<<eval=FALSE>>=\ninstall.packages('googleVis') \n@\nThe installation was successful if the\ncommand \\texttt{library(googleVis)} gives you the following message:\n<<echo=FALSE, quite=TRUE>>=\nlibrary(googleVis)\n@ \n<<eval=FALSE>>=\nlibrary(googleVis)\n@ \n<<echo=FALSE>>=\ncat(googleVis:::gvisWelcomeMessage())\n@ \n\n\\subsection{Using the  \\googleVis package}\\label{sec:UsingGoogleVis}\n\nThe individual functions of the \\googleVis package are documented in\nthe help pages. Here we will cover only the principles of\nthe package.\n\nAs an example we will show how to generate a motion chart as displayed in   \nFigure~\\ref{MotionChartGUI}. It works similarly for the other\nAPIs. Further examples are covered in the demos\\footnote{See\n  \\texttt{demo(package=\"googleVis\")} for a list of the available demos.} of the \\googleVis\npackage.\n\nThe design of the visualisation functions is fairly generic. The name\nof the visualisation function is \\texttt{'gvis' + ChartType}. So for\nthe Motion Chart we have: \n\\begin{verbatim}\ngvisMotionChart(data, idvar='id', timevar='date', \n                options=list(), chartid)\n\\end{verbatim}\nHere \\texttt{data} is the input \\texttt{data.frame} and \\texttt{idvar}\nand \\texttt{timevar} specify the column names of the id variable and\ntime variable for the plot, while display options are set in an\noptional list, which we discuss in more detail on\npage~\\pageref{settingoptions}. The options and data requirements\nfollow those of the Google Chart Tools and are documented in the\nhelp pages, see \n<<eval=FALSE>>=\nhelp('gvisMotionChart')\n@ \n\n\\begin{figure}%{r}{0.35\\textwidth}\n\\begin{center}\n\\includegraphics[width=0.34\\textwidth]{./figures/gvisObject.pdf}\n\\caption{Schematic structure of a gvis list object.\n}\\label{gvisObject}\n\\end{center}\n\\end{figure}\n\nThe argument \\texttt{chartid}  allows the user to set a chart id of the\noutput chart manually. If the argument is missing a random id using \n\\texttt{tempfile(pattern=\\textquotesingle\\textquotesingle)}  \nwill be generated. Unique chart ids are required to place more than\none chart on a web page. \n\nThe output of a \\googleVis function is a list of lists (a nested list)\ncontaining information about the chart type, chart id and the html\ncode in a  sub-list with header, chart, caption and footer, see Figure~\\ref{gvisObject}.\n\nThe idea behind this concept is that users can get a\ncomplete web page, while at the same time offer a facility to extract \nspecific parts, such as the chart itself. \nThis is particularly helpful if the package functions\nare used in solutions where the user wants to feed the visualisation\noutput into other sites, or would like to embed them into rsp-pages\n(see page~\\pageref{rspexample}),  use \\rapache (see\npage~\\pageref{rapacheexample}) or Google Gadgets.  \n\nThe output of a \\googleVis function will be of class \\texttt{'gvis'}\nand \\texttt{'list'}. Generic print (\\texttt{print.gvis})  and plot\n(\\texttt{plot.gvis}) functions exist to ease the handling of such objects. \n\nTo illustrate the concept we shall create a motion chart using the\n\\texttt{Fruits} data set. \n\n\\subsection{Motion Chart Example}\\label{sec:MotionChartExample}\n\nFollowing the documentation of the Google Motion Chart API we need a\ndata set which has at least four columns: one identifying the\nvariable we would like to plot, one time variable and at least two\nnumerical variables, further numerical and character columns are allowed.\n\nAs an example we use the \\texttt{Fruits} data set:\n<<>>=\ndata(Fruits)\nFruits\n@\n\nHere we will use the columns \\texttt{'Fruit'} and\n\\texttt{'Year'} as id and time variable respectively. However we could\nhave used \\texttt{'Date'} instead of \\texttt{'Year'} as well. \n\n<<>>=\n M <- gvisMotionChart(Fruits, idvar=\"Fruit\", timevar=\"Year\")\n@\nThe structural output of \\texttt{gvisMotionChart} is a list of lists as\ndescribed above \n<<eval=FALSE>>=\n str(M)\n@ \n<<echo=FALSE>>=\n## This statement avoids truncation\ncat(paste(substring( capture.output( str(M) ) , 0, 66), sep=\"\\n\", collapse=\"\\n\"))\n@ \nThe first two items of the list contain information about the chart type\nused and the individual chart id: %generated at run time from the chart\n%type and \\texttt{tempfile(pattern=\\textquotesingle\\textquotesingle)}:\n<<>>=\nM$type\nM$chartid\n@ \nThe html output is a list with header, chart, caption and\nfooter. This allows the user to extract only certain parts\nof the page, or to create a complete html page. \n\nThe header part of the html page has only basic html and formatting tags: \n<<>>=\nprint(M, tag='header')\n@ \nHere we used the \\texttt{print} statement with the tag\n\\texttt{'header'} instead of \\texttt{M\\$html\\$header} to achieve\na formatted screen output. This is the same output as\n\\texttt{cat(M\\$html\\$chart)}. \n\nThe actual Google visualisation code is stored with the data\nas a named character vector in the \\texttt{chart} item of the html\nlist. The chart is made up of several JavaScript and  HTML\nstatements. Please notice that the JavaScript functions are  \nuniquely named with the information of the chart id.\nThis concept allows the user get all the chart code directly or only\nspecific parts; see the examples in the help page of \\texttt{print.gvis}\nfor more details.\n<<>>=\nnames(M$html$chart)\n@ \nThe complete chart can be displayed via:\n<<>>=\nprint(M, tag='chart')  ## or cat(M$html$chart)\n@\nSimilarly you can also access specific components of the chart, e.g. (output  truncated)\n<<eval=FALSE>>=\ncat(M$html$chart['jsChart']) # or print(M, 'jsChart')\n@ \n<<echo=FALSE>>=\ncat(paste(substring( capture.output( cat(M$html$chart['jsChart']) ) , 0, 66), sep=\"\\n\", collapse=\"\\n\"))\n@ \nA basic chart caption and html footer are the final items of the html\nlist (output  truncated):\n\n<<eval=FALSE>>=\nprint(M, tag='caption')\n@ \n<<echo=FALSE>>=\ncat(paste(substring( capture.output( cat(M$html$caption) ) , 0, 66), sep=\"\\n\", collapse=\"\\n\"))\n@ \n\n<<eval=FALSE>>=\nprint(M, tag='footer')\n@ \n<<echo=FALSE>>=\ncat(paste(substring( capture.output( cat(M$html$footer) ) , 0, 66), sep=\"\\n\", collapse=\"\\n\"))\n@ \n\n\\subsection{Displaying \\texttt{gvis} objects\n  locally}\\label{sec:DisplayLocally} \n\nTo display the page locally, type:\n<<eval=FALSE>>=\nplot(M)  # returns invisibly the file name\n@\n\nThe plot method for \\texttt{gvis}-objects creates html files in a temporary folder using\nthe type and chart id information of the object and it will display\nthe output using the R HTTP help web server locally, usually under\nhttp://127.0.0.1.   \n\nNote that the chart caption provides a link to the chart code via\nthe chart id for copy and paste. \n\nThe R command \\texttt{tempdir()}  will show you the path of the\nper-session temporary directory, in which the files were written.  \nYou can write the chart into a local html file via the \\texttt{print}\ncommand with the file argument, e.g.\n<<eval=FALSE>>=\nprint(M, file=\"myGoogleVisChart.html\")\n@ \n\nPlease note that Flash charts\\footnote{Currently the following charts\n  require Flash: motion chart, geo map and\n  annotated time line} may not work when loaded as a local file\ndue to security settings, and therefore require to be displayed via a\nweb server.  However, you can overcame this issue by changing your Flash security\nsettings. Tony Breyal posted the following solution on\n\\href{http://stackoverflow.com/questions/8009825/cannot-view-gvismotionchart-from-printed-html-file \n}{stackoverflow.com}: \n\n\\begin{enumerate}\\label{breyal}\n\\item Go to \\url{http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager04.html}\n\\item Click on the dropbox which says 'Edit location' and choose 'add location'\n\\item Click 'browse for folder'\n\\item Choose the folder in which you saved your html file\n\\item Click OK\n\\end{enumerate}\n\nNow open your \\googleVis html file and it should display\nsuccessfully. \n\nAlternatively use the function \\texttt{plot.gvis} explicitly,\ne.g. suppose your html file is stored in\n\\texttt{/Users/JoeBloggs/myGoogleVisChart.html}. Using the\n\\texttt{plot.gvis} the file will be copied into a temporary directory\nand displayed via the R HTTP help server with, in the same way as a\ngvis-object: \n<<eval=FALSE>>=\nplot.gvis(\"/Users/JoeBloggs/myGoogleVisChart.html\")\n@ \n\nPlease note that this feature of \\texttt{plot.gvis} was introduced\nto \\googleVis  with version 0.3.2.\n\n\\subsection{Setting default behaviour of \\texttt{print.gvis} and\n  \\texttt{plot.gvis}}\\label{sec:Options} \n\nIn \\googleVis version 0.3.2 the function \\texttt{plot.gvis} gained the\nsame argument as \\texttt{print.gvis}: \\texttt{tag}. By default the\n\\texttt{tag} argument is set to \\texttt{NULL} in \\texttt{plot.gvis}\nand the plot function will display its output in a browser\nwindow. However, if \\texttt{tag} is not \\texttt{NULL} the function\n\\texttt{plot.gvis} will behave exactly like \\texttt{print.gvis}.\n\nThe default \\texttt{tag} can be set for both functions globally via\nthe \\texttt{options()} function. On package load \\googleVis sets\n\\texttt{options(gvis.print.tag='html')} and\n\\texttt{options(gvis.plot.tag=NULL)}. \n\nSuppose you would set \\texttt{options(gvis.plot.tag='chart')} then all\nfollowing plot statements would print the chart part of the\ngvis-object only, without opening a browser window. This might\nseem a bit odd at first, yet it becomes helpful when you write R\nMarkdown files for \\knitr or files for other packages such as\n\\textbf{\\texttt{R.rsp}}. \n\nWhile you draft your file you may want to see the output of \\googleVis\nin an interactive way, so you set \\texttt{options(gvis.plot.tag=NULL)}\nat the top of the file and you change the setting to \\texttt{'chart'}\nbefore you parse the file, say with \\textbf{\\texttt{knitr}}. This will\nensure that all plot statements return the HTML code of the chart,\nrather than opening browser windows. Section~\\ref{sec:knitr} on\npage~\\pageref{sec:knitr} provides more details and a little \\knitr\nexample.   \n\n\\subsection{Combining charts with \\texttt{gvisMerge}}\\label{gvisMerge}\n\nThe function \\texttt{gvisMerge} takes two \\texttt{gvis}-objects \nand merges the underlying components into one page. The charts are\naligned either horizontally or vertically next to each other in an HTML table. \n\n\\begin{figure}[ht]\n\\begin{center}\n\\includegraphics[width=0.8\\textwidth]{./figures/gvisMerge.pdf}\n\\caption{\n  Three charts combined with \\texttt{gvisMerge}.\n}\\label{gvisMerge}\n\\end{center}\n\\end{figure}\n\nThe output of \\texttt{gvisMerge} is a \\texttt{gvis}-object again.\nThis allows us to apply the same function iteratively to create more complex\nchart layouts.  The following example, see Figure~\\ref{gvisMerge}, aligns a geo chart\nand table below each other, and combines the output with a motion chart to the right:\n<<>>=\nG <- gvisGeoChart(Exports, \"Country\", \"Profit\", \n                  options=list(width=200, height=100))\nT <- gvisTable(Exports, \n                  options=list(width=200, height=270))\nM <- gvisMotionChart(Fruits, \"Fruit\", \"Year\",\n                     options=list(width=400, height=370))\nGT <- gvisMerge(G,T, horizontal=FALSE) \nGTM <- gvisMerge(GT, M, horizontal=TRUE, \n                 tableOptions=\"bgcolor=\\\"#CCCCCC\\\" cellspacing=10\")\n@ \n<<eval=FALSE>>=\nplot(GTM)\n@ \n\n\\subsection{Setting options}\\label{settingoptions}\n\nSetting the various options of a \\googleVis objects can be a bit\ncumbersome at first. The options follow those of the Google\nChart Tools and can be set via a named list using the argument \\texttt{options}.\nIn the following example we create a line chart and set various\noptions\\footnote{Please refer to the help file of the individual\n  \\googleVis functions, as the options can vary from chart to chart.},\nsee the output in Figure~\\ref{Options}.  \n\\begin{figure}[ht]\n\\begin{center}\n\\includegraphics[width=0.8\\textwidth]{./figures/Options.pdf}\n\\caption{\n  A line chart with various options set.\n}\\label{Options}\n\\end{center}\n\\end{figure}\n<<eval=FALSE>>=\ndf <- data.frame(country=c(\"US\", \"GB\", \"BR\"), \n                        val1=c(1,3,4), val2=c(23,12,32))\n\nLine <-  gvisLineChart(df, xvar=\"country\", yvar=c(\"val1\",\"val2\"),\n                        options=list(\n                          title=\"Hello World\",\n                          titleTextStyle=\"{color:'red', \n                                           fontName:'Courier', \n                                           fontSize:16}\",                         \n                          backgroundColor=\"#D3D3D3\",                          \n                          vAxis=\"{gridlines:{color:'red', count:3}}\",\n                          hAxis=\"{title:'Country', titleTextStyle:{color:'blue'}}\",\n\t\t          series=\"[{color:'green', targetAxisIndex: 0},\t\n                                   {color: 'orange',targetAxisIndex:1}]\",\n                          vAxes=\"[{title:'val1'}, {title:'val2'}]\",\n                          legend=\"bottom\",\n                          curveType=\"function\",\n                          width=500,\n                          height=300                         \n                          ))\nplot(Line)\n@\nAs you can see from the example above, the simpler options can be set by name=value,\ne.g. width=500, while the more complex options with sub-components are\nlisted in curly brackets \\{\\}, and arrays, e.g. to define the two\naxes, use square brackets [ ].\n\nGenerally the following rules apply:\n\n\\begin{itemize}\n\n\\item parameters with names that do not include a \".\" are set with a single \nvalue, e.g. width and height. Those are set like one would do in R, that is\n\\texttt{options=list(}\\texttt{width=200,} \\texttt{height=300)}. \nBoolean arguments are set to \neither \\texttt{TRUE} or \\texttt{FALSE}, using the R syntax.\n\n\\item parameters with names that do not include a \".\" and are set with \nmultiple values, e.g. \\texttt{color}, and are wrapped in \"[ ]\", e.g. \n\\texttt{options=list(} \\texttt{colors=\"['\\#cbb69d',} \\texttt{'\\#603913',}\n\\texttt{'\\#c69c6e']\")}\n\n\\item parameters with names that do include a \".\" present parameters with \nseveral sub-options and have to be set as a string wrapped in \"\\{ \\}\".\nThe values of those sub-options are set via parameter:value. Boolean values\nhave to be stated as \\texttt{'true'} or \\texttt{'false'}. \nFor example the Google documentaion states the formating options for the \nvertical axis and states the parameter as \\texttt{vAxis.format}. \nThen this paramter can be set in R as:\n\\texttt{options=list(} \\texttt{vAxis=\"\\{format:'\\#,\\#\\#\\#\\%'\\}\")}. \n\n\\item If several sub-options have to be set, e.g. \n\\texttt{titleTextStyle.color,} \\texttt{title\\-Text\\-Style.\\-fontName} and \n\\texttt{titleTextStyle.fontSize}, then those can be combined in one list item \nsuch as:\n\\texttt{options=list(} \\texttt{titleTextStyle=\"\\{color:'red',} \n\\texttt{fontName:'Courier',} \\texttt{fontSize:16\\}\")}\n\n\\item paramters that can have more than one value per sub-options are \nwrapped in \"[ ]\". For example to set the labels for left and right axes use:\n\\texttt{options=list(} \\texttt{vAxes=\"[\\{title:'val1'\\},} \n\\texttt{\\{title:'val2'\\}]\")}\n\n\\end{itemize}\n\n\nThe following example set the colour axis of a geo chart, \nsee Figure~\\ref{geochart}:\n<<eval=FALSE>>=\nGeo <- gvisGeoChart(CityPopularity, locationvar='City', \n                    colorvar='Popularity',\n                     options=list(region='US', height=350, \n                      displayMode='markers',\n            \t      colorAxis=\"{values:[200,400,600,800],\n                       colors:[\\'red', \\'pink\\', \\'orange',\\'green']}\")\n                      ) \nplot(Geo)\n@ \n\\begin{figure}[ht]\n\\begin{center}\n\\includegraphics[width=0.8\\textwidth]{./figures/gvisGeoChart.pdf}\n\\caption{\nA geo chart with options set for a colour axis.}\n\\label{geochart}\n\\end{center}\n\\end{figure}\n\n\\subsubsection{Chart Editor}\nA special option for all charts is \\texttt{gvis.editor}, which adds an\nedit  button to the page, allowing the user to edit, change and\ncustomise the chart on the fly, see the following example and\nFigure~\\ref{Editor}. The content of the list item \\texttt{gvis.editor}\ndescribes the label of the browser button\\footnote{See also\n  \\url{https://google-developers.appspot.com/chart/interactive/docs/drawing\\_charts\\#charteditor}}. \n<<eval=FALSE>>=\nEditor <- gvisLineChart(df, options=list(gvis.editor='Edit me!'))\nplot(Editor)\n@ \n\\begin{figure}[ht]\n\\begin{center}\n\\includegraphics[width=0.8\\textwidth]{./figures/Editor.pdf}\n\\caption{\nExample of \\googleVis chart with \\texttt{options = list (gvis.editor =\n  'Edit me!')}.\n}\\label{Editor}\n\\end{center}\n\\end{figure}\n\n\\subsubsection{Dealing with apostrophes in column names}\nThe \\googleVis package converts data frames into JSON objects.\nThe column names of the resulting JSON tables are encapsulated with\nsingle speech marks, see lines 12 -- 16 of the code example on\npage~\\pageref{motionchartcodeexample}. \n\nHence apostrophes in column names of your input data frame have\nto be encapsulated by a double backslash.\n\nHere is a little example, see the output in Figure~\\ref{fig:apostrophes}.\n<<>>=\ndf <- data.frame(\"Year\"=c(2009,2010), \"Lloyd\\\\'s\"=c(86.1, 93.3), \n                 \"Munich Re\\\\'s R/I\"=c(95.3, 100.5),\n                 check.names=FALSE) \ndf\nCR <- gvisColumnChart(df, options=list(vAxis='{baseline:0}', \n                            title=\"Combined Ratio %\",\n                            legend=\"{position:'bottom'}\"))\n@ \n<<eval=FALSE>>=\nplot(CR)\n@ \n\\begin{figure}[t]\n  \\centering\n  \\includegraphics[width=0.5\\textwidth]{./figures/Apostrophe.pdf}\n  \\caption{Visualising data with apostrophes in column names.}\n  \\label{fig:apostrophes}\n\\end{figure}\n\n\\section{Embedding \\googleVis in web sites}\n\n\\subsection{Integrating \\texttt{gvis} objects in existing sites}\n\nSuppose you have an existing web page and would like to integrate the\noutput of a \\googleVis function, such as \\texttt{gvisMotionChart}. \nIn this case you only need the chart output from\n\\texttt{gvisMotionChart}.  So you can either copy and paste the output\nfrom the R console\n<<eval=FALSE>>=\nprint(M, 'chart')  ## or cat(M$html$chart) \n@ or the browser, see previous section, \ninto your existing html page, or write the content directly into a file\n<<eval=FALSE>>=\nprint(M, 'chart', file='myfilename')\n@\nand process it from there.\n\n\\subsection{Using \\googleVis output with WordPress}\n\n\\href{http://wordpress.org/}{WordPress} is a popular web software for\ncreating websites and blogs. Here we give some tips about the\nusage with \\googleVis output.  \n\nBy default WordPress does not allow JavaScript code (and hence \\googleVis\noutput) to be inserted into a page. However, additional plugins\nallow you to extend the functions of WordPress.\n\nOne option of embedding JavaScript code inside a WordPress post is to use\nthe ``custom fields shortcode''\nplugin\\footnote{\\url{http://wordpress.org/extend/plugins/custom-fields-shortcode}}. \nThe plugin allows you to create a custom field for the \\googleVis\ncode, which can be referred to in your article.\n\nSuppose you created a motion chart in R:\n<<eval=FALSE>>=\nM <- gvisMotionChart(Fruits, \"Fruit\", \"Year\",\n\t\t     options=list(width=400, height=370))\n@\nCopy the chart code, e.g. from\n<<eval=FALSE>>=\nprint(M, 'chart')\n@ \nand paste it into the value text area of a custom field in WordPress, e.g.\nwith instance name \\texttt{Fruits}.  To include the motion chart into your article add\n\\texttt{[cf]Fruits[/cf]} into the post, see Figure~\\ref{wordpress} for\nan illustration.\n\n\\begin{figure}[t]\n  \\centering\n  \\includegraphics[width=0.8\\textwidth]{./figures/CreatePost.pdf}\n  \\caption{Including \\googleVis output in a WordPress blog entry.}\n  \\label{wordpress}\n\\end{figure}\n\n\n\\subsection{Using \\googleVis output with Google Sites, Blogger, etc.}\n\nGoogle Charts can be used with other Google products such as Google\nSites, Blogger or Google Code wiki pages. \nHowever, in most cases the chart has to be embedded as a Google Gadget.\nGoogle Gadgets are written in XML and can have HTML and Javascript components.\nHere is an example of a 'Hello World' program written using Google\nGadget technology from \\href{http://en.wikipedia.org/wiki/Google_Gadgets}{Wikipedia}.\n\\begin{verbatim}\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?> \n<Module>  \n<ModulePrefs title=\"simple hello world example\" />   \n<Content type=\"html\">     \n     <![CDATA[ \n       Hello, world!\n     ]]>\n</Content> \n</Module>\n\\end{verbatim}\nThe \\googleVis package comes with the function\n\\texttt{createGoogleGadget}, which takes a gvis-object and\nwraps it into an XML gadget file. Here is an example with a motion chart:\n<<>>=\nM <- gvisMotionChart(Fruits, \"Fruit\", \"Year\")\nG <- createGoogleGadget(M)\n@ \n<<eval=FALSE>>=\ncat(G, file=\"myGadget.xml\")\n@ \nIn order to use the gadget, the file \\texttt{myGadget.xml} has to be\nhosted online, e.g. using Google Docs. \nSuppose the URL to the gadget is\n\\texttt{http://example.com/myGadget.xml}, than you can embed  the gadget\n\n\\begin{itemize}\n\n\\item in a Google Site via the menu:\n  \n  \"Insert\" -> \"More gadgets ...\" -> \"Add gadget URL\",\n  \n\\item in a Google Code wiki via the \\texttt{wiki:gadget} tag, e.g.: \n  \n  \\texttt{<wiki:gadget url=\"http://example.com/gadget.xml\" />},\n\n \\item in Blogger via the design tab, see site gadgets.\n\\end{itemize}\n\nHowever, the situation is different again, if you would like to include the \\googleVis\noutput into a blogger post.  In this case a gadget does not\nwork. You can either copy and paste the chart directly into your\npost, but then it does not seem to work with MS Internet Explorer, or\nyou use an indirect approach. This means that the \\googleVis\nchart has to be hosted on a separate page (e.g. in a public Dropbox\nfolder) and is embedded into the blog post by using the\n\\texttt{<iframe>} tag, e.g.: \n\\begin{verbatim}\n<iframe width=\"100%\" height=\"400px\" frameborder=\"0\" \nsrc=\"http://example.com/myGoogleVisChart.html\">\n</iframe>\n\\end{verbatim}\nFor an example see the following blog entry:\n\\href{http://lamages.blogspot.com/2011/09/including-googlevis-output-into-blogger.html}\n{http://lamages.blogspot.com/2011/09/including-googlevis-output-into-blogger.html}.\n\n\n\n\\subsection{Embedding \\googleVis in web sites dynamically}\n\nIn this section we provide examples how the \\googleVis functions can be\nembedded into web sites dynamically. \n\nThe R packages \\rsp~\\cite{Rsp} and \\brew~\\cite{brew2010} are two\noptions to integrate R snippets into html code. While the \\rsp package\ncomes with its own internal web server, \\brew requires the Apache HTTP\nserver~\\cite{Apache2.0} with the \\rapache~\\cite{Rapache} module\ninstalled. Please note that currently the \\rapache module only runs on\nUNIX/Linux and Mac OS X.   \n\nSince version 2.11.0 R ships with its own internal web server and with\n\\Rook~\\cite{Rook} and \\shiny~\\cite{shiny} there are also two \nalternatives that use this facility. Both packages allow users to\ndeploy web application locally with very little overhead. The \\shiny\nframework is the newest and certainly easiest option to \nget started with web apps using R and \\googleVis.\n\n\\subsubsection{Using \\googleVis with \\rsp}\\label{rspexample}\nThe \\rsp package allows the user to integrate R code into html code.\nThe R code is parsed by the \\rsp web server and executed\nat run time. \n\nAs an example, we embed a motion chart into a rsp-page: \n\\begin{verbatim}\n<html>\n<body>\n<% library(googleVis)\n   M <- gvisMotionChart(Fruits, idvar=\"Fruit\", timevar=\"Year\") %>\n<%= M$html$chart %>\n</body>\n</html>\n\\end{verbatim}\nThe R code included in \\texttt{<\\%$\\dots$\\%>} is executed when read by\nthe R.rsp HTTP server, but no R output will be displayed. To embed the\nR output into the html code we have to add an equal sign,\n\\texttt{<\\%=$\\dots$\\%>}, which acts as a \\texttt{cat} statement.\n\nYou find an example as part of the \\googleVis package. This example\ncan be displayed via the following R command:\n<<eval=FALSE>>=\nlibrary(R.rsp) \nbrowseRsp() \n# Follow the link for googleVis in the opening browser window\n@\nThe actual rsp-file is located within the \\googleVis package directory\nand again R allows you to find the file with the following command: \n<<eval=FALSE>>=\nfile.path(system.file(\"rsp\", package = \"googleVis\"), \"index.rsp\")\n@ \nFor more information read the documentation of the \\rsp package.\n\n\\subsubsection{Using \\googleVis with \\rapache and \\brew}\\label{rapacheexample}\n\n\\rapache supports web application development using\nR and the Apache HTTP server. The  \\rapache module\nembeds the R interpreter into the Apache web server.  However, as we\nwould like to mix R and html code we also need a parser and\nthis is where the R package \\brew comes into place. \n\nFiles sitting in a dedicated \\brew folder of the HTTP repository are\nparsed by \\brew when opened in the browser. The R code is \nexecuted with \\rapache and the output is embedded into the site.\nHence the approach is similar to \\rsp with the difference that the\ntwo tasks are split. This has the advantage that R does not have to\nrun in a separate window.\n\nDetailed installation instructions for \\rapache are available on the\nproject site: \n\\href{http://rapache.net/manual.html}{http://\\-rapache.\\-net/\\-manual\\-.html},\nfor specific comments on Mac OS X see: \n\\href{http://worldofrcraft.blogspot.com/2010/08/installing-rapache-on-mac-os-x-snow.html}{http://\\-worldofrcraft\\-.blog\\-spot\\-.com/\\-2010/\\-08/\\-installing\\--rapache\\--on\\--mac\\--os\\--x\\--snow\\-.html}  \n\nFollowing the installation of \\rapache you will have to configure Apache.\nMost likely you have to add something along the following lines to your\n\\path{apache2.conf} or \\path{httpd.conf} file (often found in\n\\path{/etc/httpd} or \\path{/private/etc/apache2/httpd.conf} on Mac OS X):\n\\begin{verbatim}\nLoadModule R_module /usr/lib/apache2/modules/mod_R.so\n## On Mac OS X more likely to be:\n## LoadModule R_module libexec/apache2/mod_R.so\nROutputErrors\nRSourceOnStartup \"/var/www/rapache/R/startup.R\"\n## On Mac OS X the www folder is often equivalent to:\n## /Library/WebServer/Documents/\n\\end{verbatim}\nThe first line loads the R module when the Apache web server is\nstarted, the second line deals with error handling, while\nthe \\path{startup.R} file is suitable for initial\nset ups, e.g. libraries and global variables:\n\\begin{verbatim}\n## Ensure the packages are installed so that mod_R \n## has access to them, e.g. not in your home folder\nlibrary{googleVis} \nlibrary{lattice}\nlibrary{Cairo}\nMyGlobalVar <- 42\n\\end{verbatim}\n\nTo test that \\rapache is working open\n\\href{http://localhost/RApacheInfo}{http://\\-localhost/\\-RApacheInfo} and\nyou should find details about your system, an example can be found on\nthe \\rapache site:\n\\href{http://biostat.mc.vanderbilt.edu/rapache/files/RApacheInfo.html}{http://\\-biostat.\\-mc.\\-vanderbilt.\\-edu/\\-rapache/\\-files/\\-RApacheInfo\\-.html} \n\nThe next step is to install the \\brew R package in the usual way:\n<<eval=FALSE>>=\ninstall.packages('brew')\n@\nFollowing this we have to tell Apache that files in a specific folder\nshould be parsed by \\textbf{\\texttt{brew}}. Again we edit the \\path{apache2.conf} or\n\\path{httpd.conf}  and add the connection of the RHandler with the function \\path{brew}:\n\\begin{verbatim}\n<Directory /var/www/rapache/brew>\n## On Mac OS more likely to be something like:\n## <Directory /Library/WebServer/Documents/rapache/brew>\n      SetHandler r-script\n      RHandler brew::brew\n</Directory>\n\\end{verbatim}\n\nThat's all. Restart the HTTP daemon and you can start placing files in\nthe \\brew directory and access them via\n\\path{http://localhost/rapache/brew/filename}, e.g. a file containing:  \n\\begin{verbatim}\n<html>\n<body>\n<h1>Fruits</h1>\n<% library(googleVis)\n   M <- gvisMotionChart(Fruits, idvar=\"Fruit\", timevar=\"Year\") %>\n<%= M$html$chart %>\n</body>\n</html>\n\\end{verbatim}\n\nYou will notice that the  \\brew syntax is very similar to \\texttt{rsp}.\nFor more information read the documentation of the \\rapache\nmodule and \\brew package. \nYou find two simple examples of brew files in the \\googleVis\npackage. Again the following R command shows you the \nfolder path:\n<<eval=FALSE>>=\nsystem.file(\"brew\", package = \"googleVis\")\n@ \n\n\\subsubsection{Using \\googleVis with \\Rook}\n\n\\Rook~\\cite{Rook} is a web server interface for R, written by Jeffrey Horner, the author \nof rApache and brew. Compared to other web frameworks \\Rook appears incredible lightweight.\n\\Rook doesn't need any configuration. It is an R package, which works out of the box with the R HTTP \nserver. That means no configuration files are needed. No files have to be placed \nin particular folders. Instead, \\Rook web applications can be run on a local desktop. \nHowever, \\Rook requires some knowledge of the HTTP protocol. \n\nHere is a \\Rook app example with \\texttt{googleVis}. It displays a little R data frame in a \n\\googleVis table by default. \nThe user can change the visualisation by clicking on the \\emph{Edit me!} button \nand upload her/his own CSV-file, see Figure~\\ref{fig:Rook}. \n\n\\begin{figure}[ht]\n  \\centering\n  \\includegraphics[width=0.8\\textwidth]{./figures/Rook.pdf}\n  \\caption{Screen shot of a Rook app with \\googleVis output.}\n  \\label{fig:Rook}\n\\end{figure}\n\n<<eval=FALSE>>=\nrequire(Rook)\nrequire(googleVis)\ns <- Rhttpd$new()\ns$start(listen='127.0.0.1')\n\nmy.app <- function(env){\n ## Start with a table and allow the user to upload a CSV-file\n  req <- Request$new(env)\n  res <- Response$new()\n\n  ## Provide some data to start with\n  ## Exports is a sample data set of googleVis\n  data <- Exports[,1:2] \n  ## Add functionality to upload CSV-file\n  if (!is.null(req$POST())) {\n    ## Read data from uploaded CSV-file\n   data <- req$POST()[[\"data\"]]\n   data <- read.csv(data$tempfile)\n  }\n  ## Create table with googleVis\n  tbl <- gvisTable(data, \n                   options=list(gvis.editor=\"Edit me!\",\n                                height=350),\n                                chartid=\"myInitialView\")\n  ## Write the HTML output and\n  ## make use of the googleVis HTML output.\n  ## See vignette('googleVis') for more details\n  res$write(tbl$html$header) \n  res$write(\"<h1>My first Rook app with googleVis</h1>\")\n  res$write(tbl$html$chart)\n  res$write('\nRead CSV file:<form method=\"POST\" enctype=\"multipart/form-data\">\n<input type=\"file\" name=\"data\">\n<input type=\"submit\" name=\"Go\">\\n</form>')            \n  res$write(tbl$html$footer)\n  res$finish()\n}\ns$add(app=my.app, name='googleVisTable')\n## Open a browser window and display the web app\ns$browse('googleVisTable')\n@\n\n\\subsubsection{Using \\googleVis with \\shiny}\nShiny\\footnote{\\url{http://www.rstudio.com/shiny/}} is a package by\nRStudio. Shiny makes it incredibly easy to build interactive web\napplications with R.  \n\nWith version 0.4.0 of \\googleVis the support for \\shiny ~\\cite{shiny}\napps has been added. Joe Cheng contributed the \\texttt{renderGvis}\nfunction which allows users to use \\googleVis output in \\shiny in a\nsimilar way to other plotting functions. Note that \\shiny version\n$\\ge$ 0.4.0 is required.\n\nThe following example has been taken from the help file of\n\\texttt{renderGvis}. It displays a scatter chart where the user can\nselect the data set to be displayed, see also the screen shot in\nFigure~\\ref{fig:shiny}. \n\n<<eval=FALSE>>=\n# server.R\nlibrary(googleVis)\n\nshinyServer(function(input, output) {\n  datasetInput <- reactive({\n    switch(input$dataset,\n           \"rock\" = rock,\n           \"pressure\" = pressure,\n           \"cars\" = cars)\n  })\n  \n  output$view <- renderGvis({\n    gvisScatterChart(datasetInput())\n  })\n})\n\n# ui.R\nshinyUI(pageWithSidebar(\n  headerPanel(\"googleVis on Shiny\"),\n  sidebarPanel(\n    selectInput(\"dataset\", \"Choose a dataset:\", \n                choices = c(\"rock\", \"pressure\", \"cars\"))\n  ),\n  mainPanel(\n    htmlOutput(\"view\")\n  )\n))\n@ \n\n\\begin{figure}[ht]\n  \\centering\n  \\includegraphics[width=0.8\\textwidth]{./figures/shiny.pdf}\n  \\caption{Screen shot a \\shiny app with \\googleVis output.}\n  \\label{fig:shiny}\n\\end{figure}\n\nYou can run the example locally with the following statement.\n<<eval=FALSE>>=\nlibrary(shiny) ## Version >= 0.4.0 required\nrunApp(system.file(\"shiny/\", package=\"googleVis\"))\n@ \n\nFurther examples have been published on Markus' blog:\n\\url{http://lamages.blogspot.co.uk/search/label/shiny} \n\n\\section{Using \\googleVis with \\knitr}\\label{sec:knitr}\nUsing \\googleVis with\n\\knitr\\footnote{\\url{http://yihui.name/knitr/}}~\\cite{knitr} is a\nconvient way of creating interactive reproducible reports. The\napproach taken by \\knitr is similar to Sweave, you can combine R\ncode with text and formatting tags. However, \\knitr can also export to\nHTML, which is required to  embed \\googleVis charts.\n\nTo include \\googleVis output into a \\knitr document you have \nto set the chunk option \\texttt{results} to \\texttt{'asis'} and print the chart \nelement only, as demonstrated in the following example:\n\\begin{verbatim}\n```{r results='asis'}\nM <- gvisMotionChart(Fruits, \"Fruit\", \"Year\",\n                     options=list(width=550, height=450))\nprint(M, 'chart')\n```\n\\end{verbatim}\nA little example was published in a blog post: \n\\url{http://lamages.blogspot.co.uk/2012/05/interactive-reports-in-r-with-knitr-and.html}\n\nVersion 0.3.2 of \\googleVis introduced \\texttt{'tag'} as a new argument to\nthe plot function \\texttt{plot.gvis}, see also\npage~\\pageref{sec:Options}. This argument is by default set to\n\\texttt{NULL} and can be set globally outside the plot function via\n\\texttt{options()}.  \n\nThe argument \\texttt{tag} influences the behaviour of the plot\nfunction. The \\texttt{tag} parameter can be the same as for the print\nfunction \\texttt{print.gvis}. Indeed, setting\n\\texttt{options(gvis.plot.tag = 'chart')} will change the behaviour of\nplot to print, so \\texttt{plot(x)} will no longer open a browser\nwindow, but produce the same output as \\texttt{print(x, tag='chart')},\nif \\texttt{x} is a gvis-object. \n\nHence, setting the option \\texttt{gvis.plot.tag} in a \\knitr markdown\nRmd-file to \\texttt{'chart'} will automatically turn all following\nplot statements into html output, see the example below and Figure~\\ref{fig:markdown}. \n\n\\begin{figure}[ht]\n  \\centering\n  \\includegraphics[width=0.7\\textwidth]{./figures/MarkdownExample.pdf}\n  \\caption{Screen shot of the markdown  example output} \n  \\label{fig:markdown}\n\\end{figure}\n\n\\begin{verbatim}\n# Markdown example with knitr and googleVis\n===========================================\nThis is a little Markdown example file.\nSet the googleVis options first.\nIn this case change the behaviour of plot.gvis\n```{r setOptions, message=FALSE}\nlibrary(googleVis)\nop <- options(gvis.plot.tag='chart')\n```\nThe following plot statements will automatically return  the HTML\nrequired for the 'knitted' output. \n\n## Combo chart\n```{r ComboExample, results='asis', tidy=FALSE}\n## Add the mean\nCityPopularity$Mean=mean(CityPopularity$Popularity)\nCC <-  (CityPopularity, xvar='City',\n          yvar=c('Mean', 'Popularity'),\n          options=list(seriesType='bars',\n                       width=450, height=300,\n                       title='City Popularity',\n                       series='{0: {type:\\\"line\\\"}}'))\nplot(CC)\n```\nExample of gvisComboChart with R code shown above.\n\n## Place two charts next to each other\n```{r gvisMergeExample, results='asis', echo=FALSE}\nGeo <- gvisGeoChart(Exports, locationvar='Country', colorvar='Profit', \n                    options=list(height=300, width=350)) \nTbl <- gvisTable(Exports, options=list(height=300, width=200))\nplot(gvisMerge(Geo, Tbl, horizontal=TRUE))\n``````\nExample of a gvisGeoChart with gvisTable and R code hidden.\n\n## Motion Chart\n```{r MotionChartExample, results='asis', tidy=FALSE}\nM <- gvisMotionChart(Fruits, 'Fruit', 'Year',\n         options=list(width=400, height=350))\nplot(M)\n```\nPlease note that the Motion Chart is only displayed when hosted on a\nweb server, or is placed in a directory which has been added to the \ntrusted sources in the [security settings of Macromedia]\n(http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager04.html). \nSee the googleVis package vignette for more details. \n\n```{r resetOptions}\n## Set options back to original options\noptions(op)\n```\n\\end{verbatim}\n\nNote that you can use the \\texttt{options()} command in your \\knitr\nfile to switch between an interactive mode, where you are likely to\nexperiment, via copying and pasting R code into the console and\nrunning \\texttt{knit} on the whole file.\n\nA more comprehensive example is given in the help file to \\texttt{?plot.gvis}.\n\n\\section{Using \\googleVis in presentations}\\label{sec:presentations}\n\nThe Google Chart Tools are designed for web pages, so it should\nbe no surprise that it can be difficult or impossible to embed \\googleVis \noutput in traditional presentation software like MS PowerPoint\\footnote{For \nMS PowerPoint on MS Windows the plug-in\n\\href{http://skp.mvps.org/liveweb.htm}{liveweb} provides the\n  functionality to insert web pages into a PowerPoint slide and\n  refresh the pages real-time during slide show.}, Google Docs,\nOpenOffice Impress or Apple Keynote. \n\nThe easiest way is to include screen shots into the slide with links to\nthe live web pages. But this approach requires the presenter to switch\nbetween applications during her talk. This can be fun, but quite often\nit is not. \n\nAn alternative would be to build the presentation as a web page itself.  \n\nA popular approach here is the \\texttt{slifiy} package by Ramnath Vaidyanathan, \n\\cite{slidify} that builds on the knitr Markdown approach of the previous \nsection. An example of a \\texttt{slidify} presentation is the \\googleVis \ntutorial given at the useR! conference in 2013, \\cite{googleVisTutorial}.\n\n\\begin{figure}[h]\n  \\centering\n  \\includegraphics[width=0.5\\textwidth]{./figures/googleVisTutorial2013.png}\n  \\caption{\\googleVis tutorial at the useR! 2013 conference: \\url{http://decastillo.github.io/googleVis_Tutorial}} \n  \\label{fig:slidify}\n\\end{figure}\n\nSlidify provides a choice of different layout frameworks and syntax highlighting options. Additionally, slidify slides can be published from R online, e.g. \non Dropbox or github.\n% \n% \\section{Using \\googleVis with RStudio}\n% \n% RStudio is popular a free and open source integrated development environment \n% for R. With verion 0.98.441 RStudio introduced a viewer pane that allows users \n% to display HTML files within RStudio's IDE.\n% \n% \\googleVis will use the Viewer pane in RStudio (version >= 0.98.441) \n% to display non-Flash charts by default. Flash charts and merged gvis-objects are\n% displayed in the default browser. The setting is controlled\n% via the option \\texttt{googleVis.viewer}. By default it will have\n% the value of \\texttt{getOption(\"viewer\")}.\n% \n% Set \\texttt{options(\"googleVis.viewer\"=NULL)} and the googleVis\n% plot function will open all output in the standard browser.\n% \n\n\\section{Beyond R}\nIn this section we present ideas which go beyond the usual coding in\nR and are somewhat experimental.\n\n\\subsection{Registering to catch events}\n\nGoogle visualisations can fire and receive\nevents~\\footnote{\\url{http://code.google.com/apis/chart/interactive/docs/reference.html\\#addlistener}}. \nIt exposes the following two JavaScript methods: \n\\begin{itemize}\n\\item \\texttt{google.visualization.events.trigger()} fires an event,\n\\item \\texttt{google.visualization.events.addListener()} listens for events.\n\\end{itemize}\n\nHere is an example of registering to receive the selection event from\nthe Google documentation:\n\\begin{verbatim}\nvar table = new google.visualization.Table(document.getElementById('table_div'));\ntable.draw(data, options);\ngoogle.visualization.events.addListener(table, 'select', selectHandler);\n\nfunction selectHandler() {\n  alert('A table row was selected');\n}\n\\end{verbatim}\n\nWe will only deal with this special case of a 'select' event of the\n'addListner' method. This event is available for most visualisations\nand acts on user interactions, e.g. user selection clicks.\n\nThe 'addListener' method expects JavaScript code, which can be embedded\ninto a gvis-object via \\texttt{options} as (undocumented) parameter\n\\texttt{gvis.listener.jscode}. \n\nHere are some examples:\n\nLook up the selected item in Wikipedia:\n<<eval=FALSE>>=\njscode <- \"window.open('http://en.wikipedia.org/wiki/' \n                  + data.getValue(chart.getSelection()[0].row,0)); \"\n\nJ1 <- gvisGeoMap(Exports, locationvar='Country', numvar='Profit',\n                 options=list(dataMode=\"regions\", gvis.listener.jscode=jscode))\nplot(J1)\n@ \nIn the same way we can use the code in other charts, e.g. org- or line chart:                 \n<<eval=FALSE>>=\nplot(gvisOrgChart(Regions,  options=list(gvis.listener.jscode=jscode)))\nplot(gvisLineChart(Regions[,c(1,3)], options=list(gvis.listener.jscode=jscode)))\n@\nIn the following more advanced example the selected value of a table is\ndisplayed in a message box:\n<<eval=FALSE>>=\njscode <- \"\n       var sel = chart.getSelection();\n       var row = sel[0].row;\n       var text = data.getValue(row,1);\n       alert(text);\n\"\nJ2 <- gvisTable(Population, options=list(gvis.listener.jscode=jscode))\nplot(J2)\n@ \nFor more details see the \\texttt{demo(EventListener)} and\n\\href{https://developers.google.com/chart/interactive/docs/reference}{Google\n  Chart Tools Reference}.\n\n\\section{Frequent ask questions -- FAQ}\n\\subsection{Can I use googleVis output in PDF files?}\nNo, not directly. \n\nThe Google Chart Tools API is designed for dynamic web\noutput on your screen and not on paper. See also the\nsection~\\ref{sec:presentations}, page~\\pageref{sec:presentations},\nwhich covers how to use \\googleVis in presentations. \n\nNote that this vignette uses screen shots to include\nexamples of \\googleVis charts.\n\nFor further details see Google's online documentation on \n\\href{https://developers.google.com/chart/interactive/docs/printing}{printing \nPNG charts}.\n\n\\subsection{Can I change the colour of the bubbles in motion charts?}\n\nNo, unfortunately not.\n\nThe colours are set by the Google Chart Tools API and cannot be changed\nby the user.\n\n\\subsection{Can I change the icons in Maps?}\n\nNo, not via \\texttt{gvisMap}.\n\nHowever, you can upload your data to a Google Fusion Table and link it\nto a second table which defines the icons. See the Google Fusion Table\nsupport page for more details: \\url{http://support.google.com/fusiontables/answer/2679986?hl=en}\n\n\\subsection{Why can't I see motion charts when I open them from a local directory?}\n\nSee section~\\ref{sec:DisplayLocally} on page~\\pageref{sec:DisplayLocally}\n\n\\subsection{Why can't I see motion charts on my iPad/iPhone?}\n\nMotion charts (also geo maps and annotated time lines) are rendered in\nyour browser using Flash, unlike most other charts which use\nHTML5. Unfortunately Flash is not directly supported on iOS devices\nsuch as iPads and iPhones. \n\nApparently there is little appetite at Google to migrate motion\ncharts to HTML5 or other technologies, see the following Google\nVisualisation API news group post: \\url{http://goo.gl/5Zyuw}.\n\n\\subsection{How can I set axes limits with googleVis?}\n\nUnfortunately, there are no arguments such as \\texttt{ylim} and \\texttt{xlim}. \nInstead, the Google Charts axes options are set via \\texttt{hAxes} and \n\\texttt{vAxes}, with h and v indicating the horizontal and vertical axis. \nMore precisely, we have to set  \\texttt{viewWindowMode : 'explicit'} and set \nthe \\texttt{viewWindow} to the desired min and max values. \nAdditionally, we have to wrap all of this in $[\\{\\}]$ brackets as those \nsettings are sub-options of \\texttt{h/vAxes}. \nThere are also options \\texttt{minValue} and \\texttt{maxValue}, \nbut they only allow you to extend the axes ranges.\n\nHere is a minimal example, setting the y-axis limits from 0 to 10:\n<<eval=FALSE>>=\nlibrary(googleVis)\ndat <- data.frame(x=LETTERS[1:10], \n                  y=c(0, 4, -2, 2, 4, 3, 8, 15, 10, 4))\narea1 <- gvisAreaChart(xvar=\"x\", yvar=\"y\", data=dat,\n    \toptions=list(vAxes=\"[{viewWindowMode:'explicit',\n\t\t\tviewWindow:{min:0, max:10}}]\",\n                        width=500, height=400, \n                        title=\"y-limits set from 0 to 10\"),\n\t\t\tchartid=\"area1ylim\")\nplot(area1)\n@\n\n\\subsection{How can I change the look and feel of the charts?}\n\nThe charts have a lot of options which allow you to change the look\nand feel of the output, see the help files for more details. However,\n\\googleVis provides only an interface to the Google Chart Tools. If\nyou have specific questions to the charts then please join the Google\nVisualisation API newsgroup: \n\\url{http://groups.google.com/group/google-visualization-api}.\n\nFor frequent ask questions regarding the API check: \n\\url{https://developers.google.com/chart/interactive/faq}.\n\n\\subsection{Is it possible to use \\googleVis in corporate work?}\nReview the Google Terms of Service\n(\\url{https://developers.google.com/terms/}) and get in touch with\nyour colleagues in IT / Legal. If in doubt contact Google\ndirectly. \n\n\\subsection{Bugs and issues}\n\nShould you find any issues or bugs with googleVis, then please drop\nus a line or add them to our issues list: \n\\url{http://code.google.com/p/google-motion-charts-with-r/issues/list}\n\n\n\\section{Contact}\n\\subsection{Collaboration} \nObviously, the package is work in progress and there are many other functions of the Google\nChart Tools which are still untouched. \n\nPlease feel free to send us an email if you would like to be kept\ninformed of new versions, or if you have any feedback, ideas,\nsuggestions or would like to collaborate, our address is\n\\href{mailto:rvisualisation@gmail.com}{rvisualisation@gmail.com}. \n\n\n\\subsection{Citation}\nPlease cite R and \\googleVis if you use it in your work or publications. Use\n<<eval=FALSE>>=\ncitation(\"googleVis\")\n@\nand\n<<eval=FALSE>>=\ncitation()\n@ \nfor  bib-entries and information on how to cite the software.\n\n\\subsection{Training and consultancy}\nPlease contact us if you would like to discuss training or\nconsultancy: \\href{mailto:rvisualisation@gmail.com?subject=Training-and-consultancy}{rvisualisation@gmail.com} \n\n\n%%\\clearpage\n\n\\bibliographystyle{alpha}\n\\bibliography{googleVis}\n\\addcontentsline{toc}{section}{References} \n\n\\end{document}\n\n",
    "created" : 1401137956513.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3176931631",
    "id" : "5EEC1890",
    "lastKnownWriteTime" : 1401116348,
    "path" : "~/GitHub/googleVis/vignettes/googleVis.Rnw",
    "project_path" : "vignettes/googleVis.Rnw",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "sweave"
}